{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sessionBank, sessionPlan } from \"../../../redux/sessions/sessionsSlice\";\nexport default function useDrag() {\n  _s();\n\n  const bank = useSelector(sessionBank);\n  const plan = useSelector(sessionPlan);\n  const dispatch = useDispatch();\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; // Move item from one list to other\n\n\n  const move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(source.droppableId === \"training-plan-key\" ? plan : bank, source.index, destination.index);\n      let state = {\n        items\n      };\n\n      if (source.droppableId === \"training-plan-key\") {\n        console.log(state);\n      }\n    }\n  };\n\n  return {\n    onDragEnd\n  };\n}\n\n_s(useDrag, \"TwvHC5OpaiH67JbjNYtSb4uztcQ=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});","map":{"version":3,"names":["React","useState","useDispatch","useSelector","sessionBank","sessionPlan","useDrag","bank","plan","dispatch","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","onDragEnd","items","state","console","log"],"sources":["/home/yanay/projects/novos/training-plan/client/src/components/training-plan-manager/hooks/useDrag.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  sessionBank,\n  sessionPlan,\n} from \"../../../redux/sessions/sessionsSlice\";\n\nexport default function useDrag() {\n  const bank = useSelector(sessionBank);\n  const plan = useSelector(sessionPlan);\n  const dispatch = useDispatch();\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  // Move item from one list to other\n  const move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        source.droppableId === \"training-plan-key\" ? plan : bank,\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"training-plan-key\") {\n        console.log(state);\n      }\n    }\n  };\n\n  return { onDragEnd };\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,WADF,EAEEC,WAFF,QAGO,uCAHP;AAKA,eAAe,SAASC,OAAT,GAAmB;EAAA;;EAChC,MAAMC,IAAI,GAAGJ,WAAW,CAACC,WAAD,CAAxB;EACA,MAAMI,IAAI,GAAGL,WAAW,CAACE,WAAD,CAAxB;EACA,MAAMI,QAAQ,GAAGP,WAAW,EAA5B;;EAEA,MAAMQ,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;IAC9C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;IACA,MAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;IACAE,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;IAEA,OAAOH,MAAP;EACD,CAND,CALgC,CAahC;;;EACA,MAAMK,IAAI,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBC,eAAtB,EAAuCC,oBAAvC,KAAgE;IAC3E,MAAMC,WAAW,GAAGT,KAAK,CAACC,IAAN,CAAWI,MAAX,CAApB;IACA,MAAMK,SAAS,GAAGV,KAAK,CAACC,IAAN,CAAWK,WAAX,CAAlB;IACA,MAAM,CAACJ,OAAD,IAAYO,WAAW,CAACN,MAAZ,CAAmBI,eAAe,CAACI,KAAnC,EAA0C,CAA1C,CAAlB;IAEAD,SAAS,CAACP,MAAV,CAAiBK,oBAAoB,CAACG,KAAtC,EAA6C,CAA7C,EAAgDT,OAAhD;IAEA,MAAMH,MAAM,GAAG,EAAf;IACAA,MAAM,CAACQ,eAAe,CAACK,WAAjB,CAAN,GAAsCH,WAAtC;IACAV,MAAM,CAACS,oBAAoB,CAACI,WAAtB,CAAN,GAA2CF,SAA3C;IAEA,OAAOX,MAAP;EACD,CAZD;;EAcA,MAAMc,SAAS,GAAId,MAAD,IAAY;IAC5B,MAAM;MAAEM,MAAF;MAAUC;IAAV,IAA0BP,MAAhC;;IACA,IAAI,CAACO,WAAL,EAAkB;MAChB;IACD;;IACD,IAAID,MAAM,CAACO,WAAP,KAAuBN,WAAW,CAACM,WAAvC,EAAoD;MAClD,MAAME,KAAK,GAAGnB,OAAO,CACnBU,MAAM,CAACO,WAAP,KAAuB,mBAAvB,GAA6CnB,IAA7C,GAAoDD,IADjC,EAEnBa,MAAM,CAACM,KAFY,EAGnBL,WAAW,CAACK,KAHO,CAArB;MAMA,IAAII,KAAK,GAAG;QAAED;MAAF,CAAZ;;MAEA,IAAIT,MAAM,CAACO,WAAP,KAAuB,mBAA3B,EAAgD;QAC9CI,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACD;IACF;EACF,CAlBD;;EAoBA,OAAO;IAAEF;EAAF,CAAP;AACD;;GAjDuBtB,O;UACTH,W,EACAA,W,EACID,W"},"metadata":{},"sourceType":"module"}