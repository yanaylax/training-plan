{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"/api/sessions/\";\n\nconst getSessions = async token => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URL, config);\n  return response.data;\n};\n\nconst addSession = async (sessionData, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.post(API_URL, sessionData, config);\n  return response.data;\n};\n\nconst deleteSession = async (sessionId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.delete(API_URL + sessionId, config);\n  return response.data;\n};\n\nconst updateSession = async (session, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  await axios.post(API_URL + session._id, session, config);\n  return session;\n};\n\nconst sessionsService = {\n  getSessions,\n  addSession,\n  deleteSession,\n  updateSession\n};\nexport default sessionsService;","map":{"version":3,"names":["axios","API_URL","getSessions","token","config","headers","Authorization","response","get","data","addSession","sessionData","post","deleteSession","sessionId","delete","updateSession","session","_id","sessionsService"],"sources":["/home/yanay/projects/novos/training-plan/client/src/redux/sessions/sessionsService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"/api/sessions/\";\n\nconst getSessions = async (token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL, config);\n  return response.data;\n};\n\nconst addSession = async (sessionData, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.post(API_URL, sessionData, config);\n  return response.data;\n};\n\nconst deleteSession = async (sessionId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.delete(API_URL + sessionId, config);\n  return response.data;\n};\n\nconst updateSession = async (session, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  await axios.post(API_URL + session._id, session, config);\n  return session;\n};\n\nconst sessionsService = {\n  getSessions,\n  addSession,\n  deleteSession,\n  updateSession,\n};\n\nexport default sessionsService;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,gBAAhB;;AAEA,MAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;EACnC,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASH,KAAM;IADxB;EADI,CAAf;EAKA,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUP,OAAV,EAAmBG,MAAnB,CAAvB;EACA,OAAOG,QAAQ,CAACE,IAAhB;AACD,CARD;;AAUA,MAAMC,UAAU,GAAG,OAAOC,WAAP,EAAoBR,KAApB,KAA8B;EAC/C,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASH,KAAM;IADxB;EADI,CAAf;EAKA,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAACY,IAAN,CAAWX,OAAX,EAAoBU,WAApB,EAAiCP,MAAjC,CAAvB;EACA,OAAOG,QAAQ,CAACE,IAAhB;AACD,CARD;;AAUA,MAAMI,aAAa,GAAG,OAAOC,SAAP,EAAkBX,KAAlB,KAA4B;EAChD,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASH,KAAM;IADxB;EADI,CAAf;EAKA,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAACe,MAAN,CAAad,OAAO,GAAGa,SAAvB,EAAkCV,MAAlC,CAAvB;EACA,OAAOG,QAAQ,CAACE,IAAhB;AACD,CARD;;AAUA,MAAMO,aAAa,GAAG,OAAOC,OAAP,EAAgBd,KAAhB,KAA0B;EAC9C,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASH,KAAM;IADxB;EADI,CAAf;EAKA,MAAMH,KAAK,CAACY,IAAN,CAAWX,OAAO,GAAGgB,OAAO,CAACC,GAA7B,EAAkCD,OAAlC,EAA2Cb,MAA3C,CAAN;EACA,OAAOa,OAAP;AACD,CARD;;AAUA,MAAME,eAAe,GAAG;EACtBjB,WADsB;EAEtBQ,UAFsB;EAGtBG,aAHsB;EAItBG;AAJsB,CAAxB;AAOA,eAAeG,eAAf"},"metadata":{},"sourceType":"module"}